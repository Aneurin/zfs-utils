#!/usr/bin/env python3

import sys
import subprocess
import re


class Command(object):
    def __init__(self, args):
        self.args = args
        self.stdout = None
        self.stderr = None

    def run(self):
        process = subprocess.Popen(self.args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        self.stdout, self.stderr = process.communicate()

    def lines(self):
        if self.stdout is None:
            self.run()
        return self.stdout.decode().strip().splitlines()

labels = {
    'Monthly': '@zfs-auto-snap_monthly-',
    'Weekly': '@zfs-auto-snap_weekly-',
    'Daily': '@zfs-auto-snap_daily-',
    'Hourly': '@zfs-auto-snap_hourly-',
    'Frequent': '@zfs-auto-snap_frequent-',
    'Mirror': '@zfs-mirror_',
    'ZSys': '@autozsys_',
}

results = {}
for label in labels.keys():
    results[label] = {'Total': 0}
results['Other'] = {'Total': 0}
results['Total'] = {'Total': 0}

datasets = Command("zfs list -o name -H".split()).lines()

col_width = 0
for dataset in datasets:
    col_width = max(col_width, len(dataset))
    list_cmd = "zfs list -t snapshot -o name -s name -d 1 -H -r".split()
    list_cmd.append(dataset)
    cmd = Command(list_cmd)
    snapshots = cmd.lines()
    for snapshot in snapshots:
        for label, pattern in labels.items():
            if re.search(pattern, snapshot):
                cur_count = results[label].get(dataset, 0)
                results[label][dataset] = cur_count + 1
                results[label]['Total'] += 1
                break
        else:
            cur_count = results['Other'].get(dataset, 0)
            results['Other'][dataset] = cur_count + 1
            results['Other']['Total'] += 1
    results['Total'][dataset] = len(snapshots)
    results['Total']['Total'] += len(snapshots)

datasets.append('Total')

sys.stdout.write('{0: <{pad}}'.format('', pad=col_width))
for label in results.keys():
    sys.stdout.write('{0: >10}'.format(label))
sys.stdout.write('\n')

for dataset in datasets:
    sys.stdout.write('{0: <{pad}}'.format(dataset, pad=col_width))
    for label, counts in results.items():
        sys.stdout.write('{0: >10}'.format(counts.get(dataset, 0)))
    sys.stdout.write('\n')

sys.stdout.flush()
